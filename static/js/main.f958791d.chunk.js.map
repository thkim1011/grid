{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","rows","setRows","cols","setCols","grid","setGrid","whiteBoxStyle","backgroundColor","border","width","height","display","margin","blackBoxStyle","makeHandleBoxClick","i","j","new_grid","gridRender","gridCol","push","key","style","onClick","className","marginTop","value","onChange","event","target","arr","length","fill","console","log","map","Math","floor","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8MAiFeA,MA9Ef,WAAgB,IAAD,EACWC,mBAAS,GADpB,mBACNC,EADM,KACAC,EADA,OAEWF,mBAAS,GAFpB,mBAENG,EAFM,KAEAC,EAFA,OAIWJ,mBAAS,MAJpB,mBAINK,EAJM,KAIAC,EAJA,KAcPC,EAAgB,CACpBC,gBAAiB,QACjBC,OAAQ,kBACRC,MAAO,OACPC,OAAQ,OACRC,QAAS,eACTC,OAAQ,QAGJC,EAAgB,CACpBN,gBAAiB,QACjBC,OAAQ,kBACRC,MAAO,OACPC,OAAQ,OACRC,QAAS,eACTC,OAAQ,QAGJE,EAAqB,SAACC,EAAGC,GAC7B,OAAO,WACLX,GAAQ,SAAAD,GACN,IAAMa,EAAQ,YAAOb,GAErB,OADAa,EAASf,EAAOa,EAAIC,GAAK,EAAIC,EAASf,EAAOa,EAAIC,GAC1CC,OASPC,EAAcd,EAAc,GAAP,KAC3B,GAAIA,EACF,IAAK,IAAIW,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CAE7B,IADA,IAAMI,EAAU,GACPH,EAAI,EAAGA,EAAId,EAAMc,IACG,IAAvBZ,EAAKF,EAAOa,EAAIC,GAClBG,EAAQC,KACN,yBAAKC,IAAKL,EAAGM,MAAOhB,EAAeiB,QAAST,EAAmBC,EAAGC,MAEnEG,EAAQC,KACP,yBAAKC,IAAKL,EAAGM,MAAOT,EAAeU,QAAST,EAAmBC,EAAGC,MAGxEE,EAAWE,KAAK,yBAAKC,IAAKN,GAAII,IAIlC,OACE,yBAAKK,UAAU,OACb,yBAAKF,MAAO,CAACG,UAAW,UAAxB,aACY,2BAAOC,MAAO1B,EAAM2B,SAAU,SAACC,GAAW3B,EAAQ2B,EAAMC,OAAOH,UAD3E,aAEY,2BAAOA,MAAOxB,EAAMyB,SAAU,SAACC,GAAWzB,EAAQyB,EAAMC,OAAOH,UACzE,4BAAQH,QA9DO,WACnB,IAAMO,EAAM,GACZA,EAAIC,OAAS/B,EAAOE,EACpB4B,EAAIE,KAAK,GACT3B,EAAQyB,GACRG,QAAQC,IAAIJ,KAyDR,UACA,4BAAQP,QA3BU,WACtBlB,GAAQ,SAAAD,GAAI,OAAIA,EAAK+B,KAAI,kBAAMC,KAAKC,MAAsB,EAAhBD,KAAKE,kBA0B3C,cAEF,yBAAKhB,MAAO,CAACG,UAAW,UACrBP,KC/DWqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.f958791d.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nfunction App() {\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n\n  const [grid, setGrid] = useState(null);\n\n  const handleSubmit = () => {\n    const arr = []\n    arr.length = rows * cols;\n    arr.fill(0);\n    setGrid(arr);\n    console.log(arr);\n  };\n  \n  const whiteBoxStyle = {\n    backgroundColor: 'white', \n    border: '2px solid black',\n    width: '50px',\n    height: '50px',\n    display: 'inline-block',\n    margin: '10px'\n  };\n\n  const blackBoxStyle = {\n    backgroundColor: 'black', \n    border: '2px solid black',\n    width: '50px',\n    height: '50px',\n    display: 'inline-block',\n    margin: '10px'\n  };\n\n  const makeHandleBoxClick = (i, j) => {\n    return () => {\n      setGrid(grid => {\n        const new_grid = [...grid];\n        new_grid[cols * i + j] = 1 - new_grid[cols * i + j];\n        return new_grid;\n      });\n    }\n  }\n\n  const handleRandomize = () => {\n    setGrid(grid => grid.map(() => Math.floor(Math.random() * 2)));\n  }\n\n  const gridRender = !grid ? null : []\n  if (grid) {\n    for (let i = 0; i < rows; i++) {\n      const gridCol = [];\n      for (let j = 0; j < cols; j++) {\n        if (grid[cols * i + j] === 0) {\n          gridCol.push(\n            <div key={j} style={whiteBoxStyle} onClick={makeHandleBoxClick(i, j)}></div>);\n        } else {\n           gridCol.push(\n            <div key={j} style={blackBoxStyle} onClick={makeHandleBoxClick(i, j)}></div>);\n        }\n      }\n      gridRender.push(<div key={i}>{gridCol}</div>)\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div style={{marginTop: '100px'}}>\n        Num Rows: <input value={rows} onChange={(event) => {setRows(event.target.value)}}/>\n        Num Cols: <input value={cols} onChange={(event) => {setCols(event.target.value)}}/>\n        <button onClick={handleSubmit}>Submit</button>\n        <button onClick={handleRandomize}>Randomize</button>\n      </div>\n      <div style={{marginTop: '100px'}}>\n        {gridRender}     \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}